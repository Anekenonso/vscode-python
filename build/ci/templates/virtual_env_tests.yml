parameters:
  name: 'Unit_Test_Run'
  PythonVersion: '3.7'
  NodeVersion: '8.11.2'
  NpmVersion: 'latest'
  PoolName: 'Hosted Ubuntu 1604'
  MOCHA_CI_REPORTER_ID: '$(Build.SourcesDirectory)/build/ci/mocha-vsts-reporter.js'
  MOCHA_CI_REPORTFILE: '$(Build.ArtifactStagingDirectory)/reports/junit-report.xml'
  MOCHA_REPORTER_JUNIT: true
  RunHygiene: true
  UploadBinary: false
  AzureStorageAccountName: 'vscodepythonci'
  AzureStorageContainerName: 'vscode-python-ci'
  EnvironmentExecutableFolder: 'bin'
  DIRECTORY_FOR_VIRTUAL_ENVS: './envPaths.json'

jobs:
- job: ${{ parameters.name }}
  pool:
    name: ${{ parameters.PoolName }}

  variables:
    # TODO: use {{ insert }}: {{ parameters.variables }}, it would not work at time I wrote this
    nodeVersion: ${{ parameters.NodeVersion }}
    npmVersion: ${{ parameters.NpmVersion }}
    pythonVersion: ${{ parameters.PythonVersion }}
    mochaReportFile: ${{ parameters.MOCHA_CI_REPORTFILE }}
    MOCHA_CI_REPORTER_ID: ${{ parameters.MOCHA_CI_REPORTER_ID }}
    MOCHA_CI_REPORTFILE: ${{ parameters.MOCHA_CI_REPORTFILE }}
    MOCHA_REPORTER_JUNIT: ${{ parameters.MOCHA_REPORTER_JUNIT }}
    runHygiene: ${{ parameters.RunHygiene }}
    uploadBinary: ${{ parameters.UploadBinary }}
    azureStorageAcctName: ${{ parameters.AzureStorageAccountName }}
    azureStorageContainerName: ${{ parameters.AzureStorageContainerName }}
    plaform: ${{ parameters.Platform }}
    environmentExecutableFolder: ${{ parameters.EnvironmentExecutableFolder }}
    DIRECTORY_FOR_VIRTUAL_ENVS: ${{ parameters.DIRECTORY_FOR_VIRTUAL_ENVS }}

  steps:
    - bash: echo REQUESTED VARIABLE VALUES

        echo Node Version = $(nodeVersion)

        echo Python Version = $(pythonVersion)

        echo NPM Version = $(npmVersion)

        echo Mocha reportfile = '$(mochaReportFile)'

        echo MOCHA_CI_REPORTFILE = $MOCHA_CI_REPORTFILE

        echo MOCHA_CI_REPORTER_ID = $MOCHA_CI_REPORTER_ID

        echo MOCHA_REPORTER_JUNIT = $MOCHA_REPORTER_JUNIT

        echo COV_UUID = $COV_UUID

        echo Run Hygiene = $(runHygiene)

      displayName: 'Show build vars'
      name: 'show_bld_vars'


    # - powershell: |
    #     New-Item -ItemType directory -Path "$(System.ArtifactsDirectory)/bin-artifacts"

    #     $buildArtifactUri = "https://$(azureStorageAcctName).blob.core.windows.net/$(azureStorageContainerName)/$(Build.BuildNumber)/bin-artifacts.zip"
    #     Write-Verbose "Downloading from $buildArtifactUri"

    #     $destination = "$(System.ArtifactsDirectory)/bin-artifacts/bin-artifacts.zip"
    #     Write-Verbose "Destination file: $destination"

    #     Invoke-WebRequest -Uri $buildArtifactUri -OutFile $destination -Verbose

    #   displayName: 'Download bin-artifacts from cloud-storage'


    # - task: ExtractFiles@1
    #   displayName: 'Splat bin-artifacts'
    #   inputs:
    #     archiveFilePatterns: '$(System.ArtifactsDirectory)/bin-artifacts/bin-artifacts.zip'

    #     destinationFolder: '$(Build.SourcesDirectory)'

    #     cleanDestinationFolder: false


    - task: UsePythonVersion@0
      displayName: 'Use Python 3.7'
      inputs:
        versionSpec: 3.7


    - bash: |
       echo "#Adds the virtual environment's executable path to json file

       import json,sys
       import os.path
       key = sys.argv[1]

       if os.path.isfile('$(DIRECTORY_FOR_VIRTUAL_ENVS)'):
           with open('$(DIRECTORY_FOR_VIRTUAL_ENVS)', 'r') as read_file:
               data = json.load(read_file)
       else:
           with open('$(DIRECTORY_FOR_VIRTUAL_ENVS)', 'w+') as read_file:
               data = {}
       with open('$(DIRECTORY_FOR_VIRTUAL_ENVS)', 'w') as outfile:
           data[key] = sys.executable
           json.dump(data, outfile, sort_keys=True, indent=4)" > addEnvPath.py

      displayName: 'Create Environment paths adder'


    - bash: |
       pip install pipenv

       pipenv run python addEnvPath.py pipenv

       cat $(DIRECTORY_FOR_VIRTUAL_ENVS)

      displayName: 'Create pipenv environment'


    - bash: |
       python -m venv .venv

       .venv/$(environmentExecutableFolder)/python addEnvPath.py venv

       cat $(DIRECTORY_FOR_VIRTUAL_ENVS)

      displayName: 'Create venv environment'


    - bash: |
       pip install virtualenv

       python -m virtualenv .virtualenv

       .virtualenv/$(environmentExecutableFolder)/python addEnvPath.py virtualenv

       cat $(DIRECTORY_FOR_VIRTUAL_ENVS)

      displayName: 'Create virtualenv environment'


    - task: CondaEnvironment@1
      displayName: 'Create conda environment '
      inputs:
        packageSpecs: 'python=3.7'


    - bash: |
       python addEnvPath.py conda

       source deactivate

       cat $(DIRECTORY_FOR_VIRTUAL_ENVS)

      displayName: 'Save conda environment executable'

